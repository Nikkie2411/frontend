let drugs = [];
let searchTimeout;
const drugSearchCache = new Map();
const MAX_CACHE_SIZE = 100;

// Debounced search function
function debouncedSearch(query, delay = 300) {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
        searchDrug(query);
    }, delay);
}

async function searchDrug(query) {
    const searchInput = document.getElementById('search');
    const searchResultsDiv = document.getElementById('search-results');
    const spinner = document.getElementById('spinner');

    query = query.trim().toLowerCase();
    if (!query) {
      searchResultsDiv.style.display = 'none';
      searchResultsDiv.innerHTML = '';
      return;
    }

    // Check cache first with LRU eviction
    if (drugSearchCache.has(query)) {
        console.log(`‚úÖ Cache hit for query: "${query}"`);
        const cachedData = drugSearchCache.get(query);
        // Move to end (most recently used)
        drugSearchCache.delete(query);
        drugSearchCache.set(query, cachedData);
        showSearchResults(cachedData, query);
        return;
    }

    try {
      // Show spinner while loading
      spinner.style.display = 'block';
      searchResultsDiv.innerHTML = '';

      // Use optimized fetch
      const result = await optimizedFetch(`${BACKEND_URL}/api/drugs?query=${encodeURIComponent(query)}&page=1&limit=10`, {
        method: 'GET'
      });

      if (!result.success) {
        throw new Error(result.error || 'L·ªói t√¨m ki·∫øm');
      }

      const drugs = result.data?.data || result.data; 

      // Check results
      if (!drugs || drugs.length === 0) {
        searchResultsDiv.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p.</p>';
        searchResultsDiv.style.display = 'block';
        return;
      }

    // Cache with LRU eviction
    if (drugSearchCache.size >= MAX_CACHE_SIZE) {
        const firstKey = drugSearchCache.keys().next().value;
        drugSearchCache.delete(firstKey);
    }
    drugSearchCache.set(query, drugs);
    console.log(`Cached result for query: "${query}"`);

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    showSearchResults(drugs, query, result.total > result.data.length ? result.page + 1 : null);

  } catch (error) {
    console.error('‚ùå L·ªói khi t√¨m ki·∫øm thu·ªëc:', error);
    
    let errorMessage = "L·ªói kh√¥ng x√°c ƒë·ªãnh";
    if (!isOnline) {
      errorMessage = "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng";
    } else if (error.message.includes('timeout')) {
      errorMessage = "K·∫øt n·ªëi qu√° ch·∫≠m";
    } else {
      errorMessage = error.message || "L·ªói t√¨m ki·∫øm";
    }
    
    searchResultsDiv.innerHTML = `<p style="color: red;">‚ö†Ô∏è ${errorMessage}. Vui l√≤ng th·ª≠ l·∫°i!</p>`;
    searchResultsDiv.style.display = 'block';
  } finally {
    spinner.style.display = 'none';
  }
}

// Cache cleanup every 10 minutes
setInterval(() => {
  drugSearchCache.clear();
  console.log('üßπ Drug search cache cleared');
}, 10 * 60 * 1000);

function showSearchResults(drugs, query, nextPage = null) {
    const searchResultsDiv = document.getElementById('search-results');
    const searchInput = document.getElementById('search');
  
    searchResultsDiv.innerHTML = ''; // X√≥a k·∫øt qu·∫£ c≈©
    searchResultsDiv.style.display = 'block';
  
    // Hi·ªÉn th·ªã t·ª´ng k·∫øt qu·∫£
    drugs.forEach(drug => {
      const drugDiv = document.createElement('div');
      drugDiv.className = 'result-item';
      drugDiv.textContent = drug['Ho·∫°t ch·∫•t']; // Hi·ªÉn th·ªã t√™n ho·∫°t ch·∫•t
      drugDiv.onclick = () => {
        searchResultsDiv.style.display = 'none';
        searchInput.value = drug['Ho·∫°t ch·∫•t']; // ƒêi·ªÅn l·∫°i √¥ t√¨m ki·∫øm
        showDrugDetails(drug); // Hi·ªÉn th·ªã chi ti·∫øt thu·ªëc
      };
      searchResultsDiv.appendChild(drugDiv);
    });
  
    // N·∫øu c√≥ th√™m k·∫øt qu·∫£ (pagination), th√™m n√∫t "Xem th√™m"
    if (nextPage) {
      const moreButton = document.createElement('button');
      moreButton.className = 'result-item';
      moreButton.textContent = 'Xem th√™m';
      moreButton.style.cursor = 'pointer';
      moreButton.style.fontStyle = 'italic';
      moreButton.onclick = () => searchDrug(query, nextPage);
      searchResultsDiv.appendChild(moreButton);
    }
}

// Event listeners with optimized debounced search
document.getElementById('search').addEventListener('input', (e) => {
    debouncedSearch(e.target.value);
});

// Hide results when clicking outside
document.addEventListener('click', (e) => {
    const searchResults = document.getElementById('search-results');
    const searchInput = document.getElementById('search');
    if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
      searchResults.style.display = 'none';
    }
});

  function showDrugDetails(drug) {
    const sections = [
      {id: 'drug-name', key: 'Ho·∫°t ch·∫•t', defaultText: 'Kh√¥ng r√µ'},
      {id: 'drug-phanloaiduocly', key: 'Ph√¢n lo·∫°i d∆∞·ª£c l√Ω'},
      {id: 'drug-lieutresosinh', key: 'Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª s∆° sinh'},
      {id: 'drug-lieutreem', key: 'Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª em'},
      {id: 'drug-hieuchinhCNthan', key: 'Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng th·∫≠n'},
      {id: 'drug-hieuchinhCNgan', key: 'Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng gan'},
      {id: 'drug-chongchidinh', key: 'Ch·ªëng ch·ªâ ƒë·ªãnh'},
      {id: 'drug-tdkmm', key: 'T√°c d·ª•ng kh√¥ng mong mu·ªën'},
      {id: 'drug-cachdungngoaiiv', key: 'C√°ch d√πng (ngo√†i IV)'},
      {id: 'drug-tuongtacccd', key: 'T∆∞∆°ng t√°c thu·ªëc ch·ªëng ch·ªâ ƒë·ªãnh'},
      {id: 'drug-ngodocqualieu', key: 'Ng·ªô ƒë·ªôc/Qu√° li·ªÅu'},
      {id: 'drug-thongsotheodoi', key: 'C√°c th√¥ng s·ªë c·∫ßn theo d√µi'},
      {id: 'drug-bhyt', key: 'B·∫£o hi·ªÉm y t·∫ø thanh to√°n'},
      {id: 'drug-capnhat', key: 'C·∫≠p nh·∫≠t'},
    ]
    
    sections.forEach(({ id, key, defaultText = 'Kh√¥ng c√≥ th√¥ng tin' }) => {
      const content = drug[key] || defaultText; // L·∫•y d·ªØ li·ªáu HTML tr·ª±c ti·∫øp t·ª´ backend
      const element = document.getElementById(id);
      element.innerHTML = content; // Hi·ªÉn th·ªã HTML m√† kh√¥ng c·∫ßn sanitize
      element.parentElement.style.display = content === defaultText ? 'none' : 'block';
    });

    const detailsSection = document.getElementById('drug-details');
    detailsSection.style.display = 'block';

    // X√≥a √¥ t√¨m ki·∫øm ƒë·ªÉ ng∆∞·ªùi d√πng d·ªÖ b·∫Øt ƒë·∫ßu l·∫°i
    document.getElementById('search').value = '';

    // Cu·ªôn m∆∞·ª£t ƒë·∫øn ph·∫ßn th√¥ng tin chi ti·∫øt
    detailsSection.scrollIntoView({
      behavior: 'smooth',
      block: 'start'
    });

    // T·ª± ƒë·ªông hi·ªán c·ªôt m·ª•c l·ª•c v√† overlay tr√™n mobile
  if (window.innerWidth <= 768) {
    const tocContainer = document.querySelector('#drug-info .toc-container');
    const overlay = document.getElementById('toc-overlay');
    if (tocContainer && overlay) {
      tocContainer.classList.add('active');
      overlay.style.display = 'block'; // Hi·ªÉn th·ªã overlay khi thanh m·ª•c l·ª•c t·ª± ƒë·ªông b·∫≠t
    }
  }

    attachAccordionEvents();
    attachLinkEvents();
  }

  // Lo·∫°i b·ªè h√†m scrollToSection c≈© - ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng global function

  function attachLinkEvents() {
    // L·∫•y t·∫•t c·∫£ c√°c li√™n k·∫øt c√≥ l·ªõp 'link-text'
    const linkElements = document.querySelectorAll('.link-text');

    linkElements.forEach(link => {
      link.addEventListener('click', event => {
        event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa li√™n k·∫øt

        // L·∫•y n·ªôi dung t·ª´ thu·ªôc t√≠nh data-message
        const message = link.getAttribute('data-message');

        if (message) {
        // Hi·ªÉn th·ªã n·ªôi dung trong modal
        document.getElementById('modalContent').innerText = message;

        // Hi·ªÉn th·ªã modal Bootstrap v·ªõi fallback
        const modalElement = document.getElementById('textModal');
        if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
          const modal = new bootstrap.Modal(modalElement);
          modal.show();
        } else if (typeof $ !== 'undefined' && $.fn.modal) {
          $('#textModal').modal('show');
        } else {
          // Fallback th·ªß c√¥ng
          modalElement.classList.add('show');
          modalElement.style.display = 'block';
          modalElement.setAttribute('aria-modal', 'true');
          modalElement.setAttribute('role', 'dialog');
          
          // Th√™m backdrop
          const backdrop = document.createElement('div');
          backdrop.className = 'modal-backdrop fade show';
          backdrop.id = 'text-modal-backdrop';
          document.body.appendChild(backdrop);
          document.body.classList.add('modal-open');
          
          // X·ª≠ l√Ω ƒë√≥ng modal
          const closeModal = () => {
            modalElement.classList.remove('show');
            modalElement.style.display = 'none';
            modalElement.removeAttribute('aria-modal');
            modalElement.removeAttribute('role');
            const existingBackdrop = document.getElementById('text-modal-backdrop');
            if (existingBackdrop) {
              existingBackdrop.remove();
            }
            document.body.classList.remove('modal-open');
          };
          
          // G·∫Øn s·ª± ki·ªán ƒë√≥ng modal
          modalElement.querySelectorAll('.btn-close, [data-bs-dismiss="modal"]').forEach(btn => {
            btn.onclick = closeModal;
          });
          
          // ƒê√≥ng modal khi click v√†o backdrop
          backdrop.onclick = closeModal;
        }
        }
      });
    });
  }

function attachAccordionEvents() {
    const accordionButtons = document.querySelectorAll('.accordion-button');

    accordionButtons.forEach(button => {
      button.addEventListener('click', () => {
        const content = button.nextElementSibling;

        // Ki·ªÉm tra tr·∫°ng th√°i hi·ªÉn th·ªã v√† chuy·ªÉn ƒë·ªïi
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', !isExpanded);

        if (isExpanded) {
          content.style.display = 'none'; // Thu g·ªçn n·ªôi dung
        } else {
            content.style.display = 'block'; // M·ªü n·ªôi dung
          }
      });
    });
  }

// Expose scrollToSection to global scope
window.scrollToSection = function(sectionId) {
  const target = document.querySelector(sectionId);
  if (target) {
    console.log('Scrolling to section:', sectionId);
    console.log('Target element:', target);
    
    const detailsContent = document.querySelector('.details-content');
    console.log('Details content:', detailsContent);
    
    if (detailsContent) {
      // Ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n: s·ª≠ d·ª•ng scrollIntoView v·ªõi container t√πy ch·ªânh
      const stickyHeader = document.querySelector('#drug-name');
      const headerHeight = stickyHeader ? stickyHeader.offsetHeight : 0;
      
      // Cu·ªôn target v√†o view tr∆∞·ªõc
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
      
      // Sau ƒë√≥ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ ƒë·ªÉ tr√°nh sticky header
      setTimeout(() => {
        const currentScrollTop = detailsContent.scrollTop;
        const adjustedPosition = currentScrollTop - headerHeight - 20;
        
        console.log('Current scroll:', currentScrollTop);
        console.log('Header height:', headerHeight);
        console.log('Adjusted position:', adjustedPosition);
        
        detailsContent.scrollTo({
          top: Math.max(0, adjustedPosition),
          behavior: 'smooth'
        });
      }, 100);
      
    } else {
      // Fallback cho tr∆∞·ªùng h·ª£p kh√¥ng c√≥ details-content
      console.log('Using fallback scroll for:', sectionId);
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start',
      });
    }
    
    // Lo·∫°i b·ªè l·ªõp highlight kh·ªèi t·∫•t c·∫£ c√°c m·ª•c
    const allSections = document.querySelectorAll('.details-item');
    allSections.forEach(section => section.classList.remove('highlight'));

    // Th√™m l·ªõp highlight cho m·ª•c ƒë∆∞·ª£c ch·ªçn
    target.classList.add('highlight');

    // ƒê√≥ng thanh m·ª•c l·ª•c v√† overlay tr√™n mobile
    if (window.innerWidth <= 768) {
      const tocContainer = document.querySelector('#drug-info .toc-container');
      const overlay = document.getElementById("toc-overlay");
      if (tocContainer) {
        tocContainer.classList.remove('active');
      }
      if (overlay) {
        overlay.style.display = 'none';
      }
    }
  } else {
    console.error('Section not found:', sectionId);
  }
};
